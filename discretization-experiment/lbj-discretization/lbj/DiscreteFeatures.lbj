package me.xuanyu.cogcomp.discretization;

import java.util.List;
import java.lang.*;

discrete{"positive", "negative"} DiscreteInstanceLabel(String line) <- {
	String[] tokens = line.split(",");
	if (Double.parseDouble(tokens[tokens.length - 1]) == 1) {
		return "positive";
	}
	else{
		return "negative";
	}
}

discrete% DiscreteFeatureSet(String line) <- {
	String[] token = line.split(",");
	for (int i = 0; i < token.length - 1; i++){	
		double val = Double.parseDouble(token[i]);
		val += 100.0;
		int discrete_class = (int)val / 5;
		sense ("Index" + Integer.toString(i) + "_" + Integer.toString(discrete_class));
	}
}

discrete% ContDiscreteFeatureSet(String line) <-{
    String[] token = line.split(",");
    for (int i = 0; i < token.length - 1; i++){
        double val = Double.parseDouble(token[i]);
        val += 100.0;
        int discrete_class = (int)val / 5;
        for (int j = 0; j <= discrete_class; j++){
            sense ("Index" + Integer.toString(i) + "_" + Integer.toString(j));
        }
    }
}
discrete DiscreteFeatureClassifier(String line) <-
learn DiscreteInstanceLabel
	using ContDiscreteFeatureSet
	from new FeatureReader("../data/data.train")
	10 rounds

	with SparseAveragedPerceptron {
		
	}

	testFrom new FeatureReader("../data/data.test")

	progressOutput 20000
end
